generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//用户表
model User {
  uid       Int         @id @default(autoincrement()) //用户id
  username  String      @unique @db.VarChar(16) //用户名
  password  String      @db.VarChar(16) //密码
  gender    user_gender @default(unknown)
  avatar    String?     @default("/avatar/default.png") @db.VarChar(255)
  signature String?     @db.VarChar(30)

  friendreq_id1Touser FriendReq[] @relation("friendreq_from_idTouser")
  friendreq_id2Touser FriendReq[] @relation("friendreq_tardet_idTouser")

  friendship_id1Touser FriendShip[] @relation("FriendShip_id1")
  friendship_id2Touser FriendShip[] @relation("FriendShip_id2")

  sendChatInfo ChatInfo[] @relation("chatInfo_User") //用户发送过的信息内容

  conversations Conversation[] //用户参与过的会话信息
}

//好友关系表
model FriendShip {
  id       Int      @id @default(autoincrement())
  id1      Int
  id2      Int
  time     DateTime 
  isDelete Boolean? @default(false) @map("isdelete")

  id1User User @relation("FriendShip_id1", fields: [id1], references: [uid], onDelete: NoAction, onUpdate: NoAction, map: "fk_id1")
  id2User User @relation("FriendShip_id2", fields: [id2], references: [uid], onDelete: NoAction, onUpdate: NoAction, map: "fk_id2")
}

//好友请求表
model FriendReq {
  id        Int      @id @default(autoincrement())
  fromId    Int      @map("form_uid") //发起请求的id  
  targetId  Int      @map("target_uid") //被请求的id
  startTime DateTime @default(now()) @map("start_time") 
  agreeTime DateTime? @map("agree_time") 
  isAgree   Boolean  @default(false) @map("is_agree")

  fromUser   User @relation("friendreq_from_idTouser", fields: [fromId], references: [uid], onDelete: NoAction, onUpdate: NoAction, map: "fk_from")
  targetUser User @relation("friendreq_tardet_idTouser", fields: [targetId], references: [uid], onDelete: NoAction, onUpdate: NoAction, map: "fk_target")
}

//聊天会话表
model Conversation {
  convId     Int      @id @default(autoincrement()) @map("conv_id") 
  isGroup    Boolean  @default(false) @map("is_group") //是不是群聊
  createTime DateTime @default(now()) @map("create_time") 
  endChatId   Int? @map("end_chat_id")  @unique//最后会话ID


  endChat ChatInfo? @relation("ChatInfo_Conversation_endChat") ///最后会话信息
  ChatInfos ChatInfo[]  @relation("ChatInfo_Conversation")//会话包含的聊天信息 多对多
  Users User[] //这个会话包含的用户
}

//聊天信息表
model ChatInfo {
  chatInfoId  Int            @id @default(autoincrement()) @map("chatinfo_id") 
  senderId    Int            @map("sender_id")
  content     String
  contentType chat_info_type
  sendTime    DateTime       @default(now()) @map("send_time")
  convId Int @map("convid") @unique

  conversation Conversation @relation("ChatInfo_Conversation_endChat",fields: [convId],references: [convId],map: "ChatInfo_con_end")
  conversations Conversation  @relation("ChatInfo_Conversation",fields: [convId],references: [convId],map: "ChatInfo_con") //属于这条消息的会话信息 多对多
  senderInfo User @relation("chatInfo_User",fields: [senderId],references: [uid]) //发送这条信息的用户信息
}

//用户性别
enum user_gender {
  female
  male
  unknown
}

//聊天的信息类型 ，是文字还是图片
enum chat_info_type {
  TEXT
  IMG
}
